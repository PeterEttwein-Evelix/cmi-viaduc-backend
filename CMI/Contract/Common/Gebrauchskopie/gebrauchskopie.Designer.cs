// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.0.0.47. www.xsd2code.com
//    <NameSpace>CMI.Contract.Common.Gebrauchskopie</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>True</PascalCase><AutomaticProperties>True</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithCustomPrefix</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>True</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
/* Important: XSD2Code has a small problem with recursive elements.
   We need to search replace the following:
   dossier1 --> dossier
   Dossier1 --> Dossier
   ordnungssystemposition1 --> ordnungssystemposition
   Ordnungssystemposition1 --> Ordnungssystemposition
   ordner1 --> ordner
   Ordner1 --> Ordner
   ZusatzDaten --> zusatzDaten
   ElementName = "zusatzDaten" --> ElementName = "merkmal"
   ShouldSerializeZusatzDaten --> ShouldSerializezusatzDaten
 */
namespace CMI.Contract.Common.Gebrauchskopie
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;


    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PaketDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "paket")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", IsNullable = false, ElementName = "paket")]
    public abstract partial class Paket
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("generierungsdatum")]
        public System.DateTime Generierungsdatum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bestellinformation")]
        public string Bestellinformation { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "schemaVersion")]
        public SchemaVersion SchemaVersion { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Paket));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Bestellinformation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBestellinformation()
        {
            return !string.IsNullOrEmpty(Bestellinformation);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Paket object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Paket object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Paket object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Paket obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Paket);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Paket obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Paket Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Paket)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Paket Deserialize(System.IO.Stream s)
        {
            return ((Paket)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Paket object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Paket object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Paket object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Paket obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Paket);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Paket obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Paket LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "schemaVersion")]
    [System.Xml.Serialization.XmlRootAttribute("schemaVersion")]
    public enum SchemaVersion
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4.1")]
        Item41,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "archivischerVorgang")]
    [System.Xml.Serialization.XmlRootAttribute("archivischerVorgang")]
    public partial class ArchivischerVorgang
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("vorgangstyp")]
        public string Vorgangstyp { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("beschreibung")]
        public string Beschreibung { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ArchivischerVorgang));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Vorgangstyp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVorgangstyp()
        {
            return !string.IsNullOrEmpty(Vorgangstyp);
        }

        /// <summary>
        /// Test whether Beschreibung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBeschreibung()
        {
            return !string.IsNullOrEmpty(Beschreibung);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArchivischerVorgang object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArchivischerVorgang object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArchivischerVorgang object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ArchivischerVorgang obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArchivischerVorgang);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ArchivischerVorgang obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ArchivischerVorgang Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ArchivischerVorgang)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ArchivischerVorgang Deserialize(System.IO.Stream s)
        {
            return ((ArchivischerVorgang)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ArchivischerVorgang object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArchivischerVorgang object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArchivischerVorgang object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArchivischerVorgang obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArchivischerVorgang);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArchivischerVorgang obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArchivischerVorgang LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DokumentDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "dokument")]
    [System.Xml.Serialization.XmlRootAttribute("dokument")]
    public abstract partial class Dokument
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("titel")]
        public string Titel { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("erscheinungsform")]
        public ErscheinungsformDokument Erscheinungsform { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("registrierdatum")]
        public HistorischerZeitpunkt Registrierdatum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("entstehungszeitraum")]
        public HistorischerZeitraum Entstehungszeitraum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("klassifizierungskategorie")]
        public string Klassifizierungskategorie { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("datenschutz")]
        public bool Datenschutz { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("oeffentlichkeitsstatus")]
        public string Oeffentlichkeitsstatus { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("oeffentlichkeitsstatusBegruendung")]
        public string OeffentlichkeitsstatusBegruendung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("sonstigeBestimmungen")]
        public string SonstigeBestimmungen { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bemerkung")]
        public string Bemerkung { get; set; }
        [System.Xml.Serialization.XmlArrayItemAttribute("merkmal", IsNullable = false, ElementName = "merkmal")]
        public List<ZusatzDatenMerkmal> zusatzDaten { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("dateiRef", DataType = "IDREFS", ElementName = "dateiRef")]
        public List<string> DateiRef { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID", AttributeName = "id")]
        public string Id { get; set; }

        public Dokument()
        {
            this.zusatzDaten = new List<ZusatzDatenMerkmal>();
            this.Entstehungszeitraum = new HistorischerZeitraum();
            this.Registrierdatum = new HistorischerZeitpunkt();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Dokument));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether zusatzDaten should be serialized
        /// </summary>
        public virtual bool ShouldSerializezusatzDaten()
        {
            return zusatzDaten != null && zusatzDaten.Count > 0;
        }

        /// <summary>
        /// Test whether DateiRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDateiRef()
        {
            return DateiRef != null && DateiRef.Count > 0;
        }

        /// <summary>
        /// Test whether Registrierdatum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRegistrierdatum()
        {
            return (Registrierdatum != null);
        }

        /// <summary>
        /// Test whether Entstehungszeitraum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEntstehungszeitraum()
        {
            return (Entstehungszeitraum != null);
        }

        /// <summary>
        /// Test whether Titel should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitel()
        {
            return !string.IsNullOrEmpty(Titel);
        }

        /// <summary>
        /// Test whether Klassifizierungskategorie should be serialized
        /// </summary>
        public virtual bool ShouldSerializeKlassifizierungskategorie()
        {
            return !string.IsNullOrEmpty(Klassifizierungskategorie);
        }

        /// <summary>
        /// Test whether Oeffentlichkeitsstatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOeffentlichkeitsstatus()
        {
            return !string.IsNullOrEmpty(Oeffentlichkeitsstatus);
        }

        /// <summary>
        /// Test whether OeffentlichkeitsstatusBegruendung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOeffentlichkeitsstatusBegruendung()
        {
            return !string.IsNullOrEmpty(OeffentlichkeitsstatusBegruendung);
        }

        /// <summary>
        /// Test whether SonstigeBestimmungen should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSonstigeBestimmungen()
        {
            return !string.IsNullOrEmpty(SonstigeBestimmungen);
        }

        /// <summary>
        /// Test whether Bemerkung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBemerkung()
        {
            return !string.IsNullOrEmpty(Bemerkung);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Dokument object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Dokument object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Dokument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Dokument obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Dokument);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Dokument obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Dokument Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Dokument)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Dokument Deserialize(System.IO.Stream s)
        {
            return ((Dokument)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Dokument object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Dokument object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Dokument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Dokument obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Dokument);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Dokument obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Dokument LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "erscheinungsformDokument")]
    [System.Xml.Serialization.XmlRootAttribute("erscheinungsformDokument")]
    public enum ErscheinungsformDokument
    {

        /// <remarks/>
        digital,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nicht digital")]
        nichtdigital,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "historischerZeitpunkt")]
    [System.Xml.Serialization.XmlRootAttribute("historischerZeitpunkt")]
    public partial class HistorischerZeitpunkt
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlElementAttribute("ca")]
        public bool Ca { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("datum")]
        public string Datum { get; set; }

        public HistorischerZeitpunkt()
        {
            this.Ca = false;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HistorischerZeitpunkt));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Datum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDatum()
        {
            return !string.IsNullOrEmpty(Datum);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HistorischerZeitpunkt object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HistorischerZeitpunkt object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HistorischerZeitpunkt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HistorischerZeitpunkt obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HistorischerZeitpunkt);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HistorischerZeitpunkt obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HistorischerZeitpunkt Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HistorischerZeitpunkt)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HistorischerZeitpunkt Deserialize(System.IO.Stream s)
        {
            return ((HistorischerZeitpunkt)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HistorischerZeitpunkt object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HistorischerZeitpunkt object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HistorischerZeitpunkt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HistorischerZeitpunkt obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HistorischerZeitpunkt);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HistorischerZeitpunkt obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HistorischerZeitpunkt LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "historischerZeitraum")]
    [System.Xml.Serialization.XmlRootAttribute("historischerZeitraum")]
    public partial class HistorischerZeitraum
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("von")]
        public HistorischerZeitpunkt Von { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bis")]
        public HistorischerZeitpunkt Bis { get; set; }

        public HistorischerZeitraum()
        {
            this.Bis = new HistorischerZeitpunkt();
            this.Von = new HistorischerZeitpunkt();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HistorischerZeitraum));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Von should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVon()
        {
            return (Von != null);
        }

        /// <summary>
        /// Test whether Bis should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBis()
        {
            return (Bis != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HistorischerZeitraum object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HistorischerZeitraum object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HistorischerZeitraum object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HistorischerZeitraum obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HistorischerZeitraum);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HistorischerZeitraum obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HistorischerZeitraum Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HistorischerZeitraum)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HistorischerZeitraum Deserialize(System.IO.Stream s)
        {
            return ((HistorischerZeitraum)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HistorischerZeitraum object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HistorischerZeitraum object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HistorischerZeitraum object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HistorischerZeitraum obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HistorischerZeitraum);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HistorischerZeitraum obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HistorischerZeitraum LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "zusatzDatenMerkmal")]
    [System.Xml.Serialization.XmlRootAttribute("zusatzDatenMerkmal")]
    public partial class ZusatzDatenMerkmal
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ZusatzDatenMerkmal));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            return !string.IsNullOrEmpty(Value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ZusatzDatenMerkmal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ZusatzDatenMerkmal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ZusatzDatenMerkmal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ZusatzDatenMerkmal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ZusatzDatenMerkmal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ZusatzDatenMerkmal obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ZusatzDatenMerkmal Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ZusatzDatenMerkmal)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ZusatzDatenMerkmal Deserialize(System.IO.Stream s)
        {
            return ((ZusatzDatenMerkmal)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ZusatzDatenMerkmal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ZusatzDatenMerkmal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ZusatzDatenMerkmal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ZusatzDatenMerkmal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ZusatzDatenMerkmal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ZusatzDatenMerkmal obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ZusatzDatenMerkmal LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "dokumentDIP")]
    [System.Xml.Serialization.XmlRootAttribute("dokumentDIP")]
    public partial class DokumentDIP : Dokument
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DokumentDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DokumentDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DokumentDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DokumentDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DokumentDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DokumentDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DokumentDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static DokumentDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DokumentDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DokumentDIP Deserialize(System.IO.Stream s)
        {
            return ((DokumentDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DokumentDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DokumentDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DokumentDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DokumentDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DokumentDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DokumentDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static DokumentDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "aktivitaet")]
    [System.Xml.Serialization.XmlRootAttribute("aktivitaet")]
    public partial class Aktivitaet
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("vorschreibung")]
        public string Vorschreibung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("anweisung")]
        public string Anweisung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bearbeiter")]
        public string Bearbeiter { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("abschlussdatum")]
        public string Abschlussdatum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("verweis", ElementName = "verweis")]
        public List<string> Verweis { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bemerkung", ElementName = "bemerkung")]
        public List<string> Bemerkung { get; set; }
        [System.Xml.Serialization.XmlArrayItemAttribute("merkmal", IsNullable = false, ElementName = "merkmal")]
        public List<ZusatzDatenMerkmal> zusatzDaten { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer", AttributeName = "order")]
        public string Order { get; set; }

        public Aktivitaet()
        {
            this.zusatzDaten = new List<ZusatzDatenMerkmal>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Aktivitaet));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Verweis should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVerweis()
        {
            return Verweis != null && Verweis.Count > 0;
        }

        /// <summary>
        /// Test whether Bemerkung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBemerkung()
        {
            return Bemerkung != null && Bemerkung.Count > 0;
        }

        /// <summary>
        /// Test whether zusatzDaten should be serialized
        /// </summary>
        public virtual bool ShouldSerializezusatzDaten()
        {
            return zusatzDaten != null && zusatzDaten.Count > 0;
        }

        /// <summary>
        /// Test whether Vorschreibung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVorschreibung()
        {
            return !string.IsNullOrEmpty(Vorschreibung);
        }

        /// <summary>
        /// Test whether Anweisung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnweisung()
        {
            return !string.IsNullOrEmpty(Anweisung);
        }

        /// <summary>
        /// Test whether Bearbeiter should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBearbeiter()
        {
            return !string.IsNullOrEmpty(Bearbeiter);
        }

        /// <summary>
        /// Test whether Abschlussdatum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAbschlussdatum()
        {
            return !string.IsNullOrEmpty(Abschlussdatum);
        }

        /// <summary>
        /// Test whether Order should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrder()
        {
            return !string.IsNullOrEmpty(Order);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Aktivitaet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Aktivitaet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Aktivitaet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Aktivitaet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Aktivitaet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Aktivitaet obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Aktivitaet Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Aktivitaet)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Aktivitaet Deserialize(System.IO.Stream s)
        {
            return ((Aktivitaet)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Aktivitaet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Aktivitaet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Aktivitaet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Aktivitaet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Aktivitaet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Aktivitaet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Aktivitaet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "vorgangAktivitaet")]
    [System.Xml.Serialization.XmlRootAttribute("vorgangAktivitaet")]
    public partial class VorgangAktivitaet
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("titel")]
        public string Titel { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("arbeitsanweisung")]
        public string Arbeitsanweisung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("federfuehrung")]
        public string Federfuehrung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("verweis", ElementName = "verweis")]
        public List<string> Verweis { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bemerkung")]
        public string Bemerkung { get; set; }
        [System.Xml.Serialization.XmlArrayItemAttribute("merkmal", IsNullable = false, ElementName = "merkmal")]
        public List<ZusatzDatenMerkmal> zusatzDaten { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("aktivitaet", ElementName = "aktivitaet")]
        public List<Aktivitaet> Aktivitaet { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer", AttributeName = "order")]
        public string Order { get; set; }

        public VorgangAktivitaet()
        {
            this.Aktivitaet = new List<Aktivitaet>();
            this.zusatzDaten = new List<ZusatzDatenMerkmal>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(VorgangAktivitaet));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Verweis should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVerweis()
        {
            return Verweis != null && Verweis.Count > 0;
        }

        /// <summary>
        /// Test whether zusatzDaten should be serialized
        /// </summary>
        public virtual bool ShouldSerializezusatzDaten()
        {
            return zusatzDaten != null && zusatzDaten.Count > 0;
        }

        /// <summary>
        /// Test whether Aktivitaet should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAktivitaet()
        {
            return Aktivitaet != null && Aktivitaet.Count > 0;
        }

        /// <summary>
        /// Test whether Text should be serialized
        /// </summary>
        public virtual bool ShouldSerializeText()
        {
            return Text != null && Text.Count > 0;
        }

        /// <summary>
        /// Test whether Titel should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitel()
        {
            return !string.IsNullOrEmpty(Titel);
        }

        /// <summary>
        /// Test whether Arbeitsanweisung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeArbeitsanweisung()
        {
            return !string.IsNullOrEmpty(Arbeitsanweisung);
        }

        /// <summary>
        /// Test whether Federfuehrung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFederfuehrung()
        {
            return !string.IsNullOrEmpty(Federfuehrung);
        }

        /// <summary>
        /// Test whether Bemerkung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBemerkung()
        {
            return !string.IsNullOrEmpty(Bemerkung);
        }

        /// <summary>
        /// Test whether Order should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrder()
        {
            return !string.IsNullOrEmpty(Order);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VorgangAktivitaet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an VorgangAktivitaet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VorgangAktivitaet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VorgangAktivitaet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VorgangAktivitaet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VorgangAktivitaet obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static VorgangAktivitaet Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((VorgangAktivitaet)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VorgangAktivitaet Deserialize(System.IO.Stream s)
        {
            return ((VorgangAktivitaet)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current VorgangAktivitaet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an VorgangAktivitaet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VorgangAktivitaet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VorgangAktivitaet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VorgangAktivitaet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VorgangAktivitaet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static VorgangAktivitaet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DossierDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "dossier")]
    [System.Xml.Serialization.XmlRootAttribute("dossier")]
    public abstract partial class Dossier
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("aktenzeichen")]
        public string Aktenzeichen { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("zusatzmerkmal")]
        public string Zusatzmerkmal { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("titel")]
        public string Titel { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("inhalt")]
        public string Inhalt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("erscheinungsform")]
        public ErscheinungsformDossier Erscheinungsform { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("umfang")]
        public string Umfang { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("federfuehrendeOrganisationseinheit")]
        public string FederfuehrendeOrganisationseinheit { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("eroeffnungsdatum")]
        public HistorischerZeitpunkt Eroeffnungsdatum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("abschlussdatum")]
        public HistorischerZeitpunkt Abschlussdatum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("entstehungszeitraum")]
        public HistorischerZeitraum Entstehungszeitraum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("entstehungszeitraumAnmerkung")]
        public string EntstehungszeitraumAnmerkung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("klassifizierungskategorie")]
        public string Klassifizierungskategorie { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("datenschutz")]
        public bool Datenschutz { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("oeffentlichkeitsstatus")]
        public string Oeffentlichkeitsstatus { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("oeffentlichkeitsstatusBegruendung")]
        public string OeffentlichkeitsstatusBegruendung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("sonstigeBestimmungen")]
        public string SonstigeBestimmungen { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("vorgang", ElementName = "vorgang")]
        public List<VorgangAktivitaet> Vorgang { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bemerkung")]
        public string Bemerkung { get; set; }
        [System.Xml.Serialization.XmlArrayItemAttribute("merkmal", IsNullable = false, ElementName = "merkmal")]
        public List<ZusatzDatenMerkmal> zusatzDaten { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID", AttributeName = "id")]
        public string Id { get; set; }

        public Dossier()
        {
            this.zusatzDaten = new List<ZusatzDatenMerkmal>();
            this.Vorgang = new List<VorgangAktivitaet>();
            this.Entstehungszeitraum = new HistorischerZeitraum();
            this.Abschlussdatum = new HistorischerZeitpunkt();
            this.Eroeffnungsdatum = new HistorischerZeitpunkt();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Dossier));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Vorgang should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVorgang()
        {
            return Vorgang != null && Vorgang.Count > 0;
        }

        /// <summary>
        /// Test whether zusatzDaten should be serialized
        /// </summary>
        public virtual bool ShouldSerializezusatzDaten()
        {
            return zusatzDaten != null && zusatzDaten.Count > 0;
        }

        /// <summary>
        /// Test whether Eroeffnungsdatum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEroeffnungsdatum()
        {
            return (Eroeffnungsdatum != null);
        }

        /// <summary>
        /// Test whether Abschlussdatum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAbschlussdatum()
        {
            return (Abschlussdatum != null);
        }

        /// <summary>
        /// Test whether Entstehungszeitraum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEntstehungszeitraum()
        {
            return (Entstehungszeitraum != null);
        }

        /// <summary>
        /// Test whether Aktenzeichen should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAktenzeichen()
        {
            return !string.IsNullOrEmpty(Aktenzeichen);
        }

        /// <summary>
        /// Test whether Zusatzmerkmal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZusatzmerkmal()
        {
            return !string.IsNullOrEmpty(Zusatzmerkmal);
        }

        /// <summary>
        /// Test whether Titel should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitel()
        {
            return !string.IsNullOrEmpty(Titel);
        }

        /// <summary>
        /// Test whether Inhalt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInhalt()
        {
            return !string.IsNullOrEmpty(Inhalt);
        }

        /// <summary>
        /// Test whether Umfang should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUmfang()
        {
            return !string.IsNullOrEmpty(Umfang);
        }

        /// <summary>
        /// Test whether FederfuehrendeOrganisationseinheit should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFederfuehrendeOrganisationseinheit()
        {
            return !string.IsNullOrEmpty(FederfuehrendeOrganisationseinheit);
        }

        /// <summary>
        /// Test whether EntstehungszeitraumAnmerkung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEntstehungszeitraumAnmerkung()
        {
            return !string.IsNullOrEmpty(EntstehungszeitraumAnmerkung);
        }

        /// <summary>
        /// Test whether Klassifizierungskategorie should be serialized
        /// </summary>
        public virtual bool ShouldSerializeKlassifizierungskategorie()
        {
            return !string.IsNullOrEmpty(Klassifizierungskategorie);
        }

        /// <summary>
        /// Test whether Oeffentlichkeitsstatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOeffentlichkeitsstatus()
        {
            return !string.IsNullOrEmpty(Oeffentlichkeitsstatus);
        }

        /// <summary>
        /// Test whether OeffentlichkeitsstatusBegruendung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOeffentlichkeitsstatusBegruendung()
        {
            return !string.IsNullOrEmpty(OeffentlichkeitsstatusBegruendung);
        }

        /// <summary>
        /// Test whether SonstigeBestimmungen should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSonstigeBestimmungen()
        {
            return !string.IsNullOrEmpty(SonstigeBestimmungen);
        }

        /// <summary>
        /// Test whether Bemerkung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBemerkung()
        {
            return !string.IsNullOrEmpty(Bemerkung);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Dossier object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Dossier object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Dossier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Dossier obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Dossier);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Dossier obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Dossier Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Dossier)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Dossier Deserialize(System.IO.Stream s)
        {
            return ((Dossier)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Dossier object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Dossier object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Dossier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Dossier obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Dossier);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Dossier obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Dossier LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "erscheinungsformDossier")]
    [System.Xml.Serialization.XmlRootAttribute("erscheinungsformDossier")]
    public enum ErscheinungsformDossier
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("keine Angabe")]
        keineAngabe,

        /// <remarks/>
        digital,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nicht digital")]
        nichtdigital,

        /// <remarks/>
        gemischt,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "dossierDIP")]
    [System.Xml.Serialization.XmlRootAttribute("dossierDIP")]
    public partial class DossierDIP : Dossier
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("dossier", ElementName = "dossier")]
        public List<DossierDIP> Dossier { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("dokument", ElementName = "dokument")]
        public List<DokumentDIP> Dokument { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("dateiRef", DataType = "IDREFS", ElementName = "dateiRef")]
        public List<string> DateiRef { get; set; }

        public DossierDIP()
        {
            this.Dokument = new List<DokumentDIP>();
            this.Dossier = new List<DossierDIP>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DossierDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Dossier should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDossier1()
        {
            return Dossier != null && Dossier.Count > 0;
        }

        /// <summary>
        /// Test whether Dokument should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDokument()
        {
            return Dokument != null && Dokument.Count > 0;
        }

        /// <summary>
        /// Test whether DateiRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDateiRef()
        {
            return DateiRef != null && DateiRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DossierDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DossierDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DossierDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DossierDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DossierDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DossierDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static DossierDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DossierDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DossierDIP Deserialize(System.IO.Stream s)
        {
            return ((DossierDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DossierDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DossierDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DossierDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DossierDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DossierDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DossierDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static DossierDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrdnungssystempositionDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ordnungssystemposition")]
    [System.Xml.Serialization.XmlRootAttribute("ordnungssystemposition")]
    public abstract partial class Ordnungssystemposition
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("nummer")]
        public string Nummer { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("titel")]
        public string Titel { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("federfuehrendeOrganisationseinheit")]
        public string FederfuehrendeOrganisationseinheit { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("klassifizierungskategorie")]
        public string Klassifizierungskategorie { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("datenschutz")]
        public bool Datenschutz { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("oeffentlichkeitsstatus")]
        public string Oeffentlichkeitsstatus { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("oeffentlichkeitsstatusBegruendung")]
        public string OeffentlichkeitsstatusBegruendung { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Ordnungssystemposition));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Nummer should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNummer()
        {
            return !string.IsNullOrEmpty(Nummer);
        }

        /// <summary>
        /// Test whether Titel should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitel()
        {
            return !string.IsNullOrEmpty(Titel);
        }

        /// <summary>
        /// Test whether FederfuehrendeOrganisationseinheit should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFederfuehrendeOrganisationseinheit()
        {
            return !string.IsNullOrEmpty(FederfuehrendeOrganisationseinheit);
        }

        /// <summary>
        /// Test whether Klassifizierungskategorie should be serialized
        /// </summary>
        public virtual bool ShouldSerializeKlassifizierungskategorie()
        {
            return !string.IsNullOrEmpty(Klassifizierungskategorie);
        }

        /// <summary>
        /// Test whether Oeffentlichkeitsstatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOeffentlichkeitsstatus()
        {
            return !string.IsNullOrEmpty(Oeffentlichkeitsstatus);
        }

        /// <summary>
        /// Test whether OeffentlichkeitsstatusBegruendung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOeffentlichkeitsstatusBegruendung()
        {
            return !string.IsNullOrEmpty(OeffentlichkeitsstatusBegruendung);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Ordnungssystemposition object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Ordnungssystemposition object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Ordnungssystemposition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Ordnungssystemposition obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ordnungssystemposition);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Ordnungssystemposition obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Ordnungssystemposition Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Ordnungssystemposition)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Ordnungssystemposition Deserialize(System.IO.Stream s)
        {
            return ((Ordnungssystemposition)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Ordnungssystemposition object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Ordnungssystemposition object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Ordnungssystemposition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Ordnungssystemposition obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ordnungssystemposition);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Ordnungssystemposition obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Ordnungssystemposition LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ordnungssystempositionDIP")]
    [System.Xml.Serialization.XmlRootAttribute("ordnungssystempositionDIP")]
    public partial class OrdnungssystempositionDIP : Ordnungssystemposition
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ordnungssystemposition", ElementName = "ordnungssystemposition")]
        public List<OrdnungssystempositionDIP> Ordnungssystemposition { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("dossier", ElementName = "dossier")]
        public List<DossierDIP> Dossier { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID", AttributeName = "id")]
        public string Id { get; set; }

        public OrdnungssystempositionDIP()
        {
            this.Dossier = new List<DossierDIP>();
            this.Ordnungssystemposition = new List<OrdnungssystempositionDIP>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrdnungssystempositionDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Ordnungssystemposition should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrdnungssystemposition1()
        {
            return Ordnungssystemposition != null && Ordnungssystemposition.Count > 0;
        }

        /// <summary>
        /// Test whether Dossier should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDossier()
        {
            return Dossier != null && Dossier.Count > 0;
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrdnungssystempositionDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an OrdnungssystempositionDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrdnungssystempositionDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrdnungssystempositionDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrdnungssystempositionDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OrdnungssystempositionDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static OrdnungssystempositionDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OrdnungssystempositionDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OrdnungssystempositionDIP Deserialize(System.IO.Stream s)
        {
            return ((OrdnungssystempositionDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OrdnungssystempositionDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OrdnungssystempositionDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrdnungssystempositionDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OrdnungssystempositionDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrdnungssystempositionDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OrdnungssystempositionDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static OrdnungssystempositionDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrdnungssystemDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ordnungssystem")]
    [System.Xml.Serialization.XmlRootAttribute("ordnungssystem")]
    public abstract partial class Ordnungssystem
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("generation")]
        public string Generation { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("mitbenutzung")]
        public string Mitbenutzung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bemerkung")]
        public string Bemerkung { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Ordnungssystem));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Generation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGeneration()
        {
            return !string.IsNullOrEmpty(Generation);
        }

        /// <summary>
        /// Test whether Mitbenutzung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMitbenutzung()
        {
            return !string.IsNullOrEmpty(Mitbenutzung);
        }

        /// <summary>
        /// Test whether Bemerkung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBemerkung()
        {
            return !string.IsNullOrEmpty(Bemerkung);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Ordnungssystem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Ordnungssystem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Ordnungssystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Ordnungssystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ordnungssystem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Ordnungssystem obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Ordnungssystem Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Ordnungssystem)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Ordnungssystem Deserialize(System.IO.Stream s)
        {
            return ((Ordnungssystem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Ordnungssystem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Ordnungssystem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Ordnungssystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Ordnungssystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ordnungssystem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Ordnungssystem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Ordnungssystem LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ordnungssystemDIP")]
    [System.Xml.Serialization.XmlRootAttribute("ordnungssystemDIP")]
    public partial class OrdnungssystemDIP : Ordnungssystem
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ordnungssystemposition", ElementName = "ordnungssystemposition")]
        public List<OrdnungssystempositionDIP> Ordnungssystemposition { get; set; }

        public OrdnungssystemDIP()
        {
            this.Ordnungssystemposition = new List<OrdnungssystempositionDIP>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrdnungssystemDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Ordnungssystemposition should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrdnungssystemposition()
        {
            return Ordnungssystemposition != null && Ordnungssystemposition.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrdnungssystemDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an OrdnungssystemDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrdnungssystemDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrdnungssystemDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrdnungssystemDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OrdnungssystemDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static OrdnungssystemDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OrdnungssystemDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OrdnungssystemDIP Deserialize(System.IO.Stream s)
        {
            return ((OrdnungssystemDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OrdnungssystemDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OrdnungssystemDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrdnungssystemDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OrdnungssystemDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrdnungssystemDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OrdnungssystemDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static OrdnungssystemDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProvenienzDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "provenienz")]
    [System.Xml.Serialization.XmlRootAttribute("provenienz")]
    public abstract partial class Provenienz
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("aktenbildnerName")]
        public string AktenbildnerName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("systemName")]
        public string SystemName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("systemBeschreibung")]
        public string SystemBeschreibung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("verwandteSysteme")]
        public string VerwandteSysteme { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("archivierungsmodusLoeschvorschriften")]
        public string ArchivierungsmodusLoeschvorschriften { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("registratur")]
        public string Registratur { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Provenienz));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AktenbildnerName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAktenbildnerName()
        {
            return !string.IsNullOrEmpty(AktenbildnerName);
        }

        /// <summary>
        /// Test whether SystemName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSystemName()
        {
            return !string.IsNullOrEmpty(SystemName);
        }

        /// <summary>
        /// Test whether SystemBeschreibung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSystemBeschreibung()
        {
            return !string.IsNullOrEmpty(SystemBeschreibung);
        }

        /// <summary>
        /// Test whether VerwandteSysteme should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVerwandteSysteme()
        {
            return !string.IsNullOrEmpty(VerwandteSysteme);
        }

        /// <summary>
        /// Test whether ArchivierungsmodusLoeschvorschriften should be serialized
        /// </summary>
        public virtual bool ShouldSerializeArchivierungsmodusLoeschvorschriften()
        {
            return !string.IsNullOrEmpty(ArchivierungsmodusLoeschvorschriften);
        }

        /// <summary>
        /// Test whether Registratur should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRegistratur()
        {
            return !string.IsNullOrEmpty(Registratur);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Provenienz object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Provenienz object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Provenienz object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Provenienz obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Provenienz);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Provenienz obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Provenienz Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Provenienz)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Provenienz Deserialize(System.IO.Stream s)
        {
            return ((Provenienz)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Provenienz object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Provenienz object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Provenienz object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Provenienz obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Provenienz);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Provenienz obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Provenienz LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "provenienzDIP")]
    [System.Xml.Serialization.XmlRootAttribute("provenienzDIP")]
    public partial class ProvenienzDIP : Provenienz
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProvenienzDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProvenienzDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ProvenienzDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProvenienzDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProvenienzDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProvenienzDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProvenienzDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static ProvenienzDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProvenienzDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProvenienzDIP Deserialize(System.IO.Stream s)
        {
            return ((ProvenienzDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProvenienzDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProvenienzDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProvenienzDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProvenienzDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProvenienzDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProvenienzDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static ProvenienzDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AblieferungDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ablieferung")]
    [System.Xml.Serialization.XmlRootAttribute("ablieferung")]
    public abstract partial class Ablieferung
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ablieferungstyp")]
        public Ablieferungstyp Ablieferungstyp { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ablieferndeStelle")]
        public string AblieferndeStelle { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("entstehungszeitraum")]
        public HistorischerZeitraum Entstehungszeitraum { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("bemerkung")]
        public string Bemerkung { get; set; }

        public Ablieferung()
        {
            this.Entstehungszeitraum = new HistorischerZeitraum();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Ablieferung));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Entstehungszeitraum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEntstehungszeitraum()
        {
            return (Entstehungszeitraum != null);
        }

        /// <summary>
        /// Test whether AblieferndeStelle should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAblieferndeStelle()
        {
            return !string.IsNullOrEmpty(AblieferndeStelle);
        }

        /// <summary>
        /// Test whether Bemerkung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBemerkung()
        {
            return !string.IsNullOrEmpty(Bemerkung);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Ablieferung object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Ablieferung object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Ablieferung object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Ablieferung obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ablieferung);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Ablieferung obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Ablieferung Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Ablieferung)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Ablieferung Deserialize(System.IO.Stream s)
        {
            return ((Ablieferung)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Ablieferung object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Ablieferung object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Ablieferung object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Ablieferung obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ablieferung);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Ablieferung obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Ablieferung LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ablieferungstyp")]
    [System.Xml.Serialization.XmlRootAttribute("ablieferungstyp")]
    public enum Ablieferungstyp
    {

        /// <remarks/>
        GEVER,

        /// <remarks/>
        FILES,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ablieferungDIP")]
    [System.Xml.Serialization.XmlRootAttribute("ablieferungDIP")]
    public partial class AblieferungDIP : Ablieferung
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ablieferungsnummer")]
        public string Ablieferungsnummer { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("provenienz")]
        public ProvenienzDIP Provenienz { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ordnungssystem")]
        public OrdnungssystemDIP Ordnungssystem { get; set; }

        public AblieferungDIP()
        {
            this.Ordnungssystem = new OrdnungssystemDIP();
            this.Provenienz = new ProvenienzDIP();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AblieferungDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Provenienz should be serialized
        /// </summary>
        public virtual bool ShouldSerializeProvenienz()
        {
            return (Provenienz != null);
        }

        /// <summary>
        /// Test whether Ordnungssystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrdnungssystem()
        {
            return (Ordnungssystem != null);
        }

        /// <summary>
        /// Test whether Ablieferungsnummer should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAblieferungsnummer()
        {
            return !string.IsNullOrEmpty(Ablieferungsnummer);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AblieferungDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an AblieferungDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AblieferungDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AblieferungDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AblieferungDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AblieferungDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static AblieferungDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AblieferungDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AblieferungDIP Deserialize(System.IO.Stream s)
        {
            return ((AblieferungDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AblieferungDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AblieferungDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AblieferungDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AblieferungDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AblieferungDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AblieferungDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static AblieferungDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "eigenschaftDatei")]
    [System.Xml.Serialization.XmlRootAttribute("eigenschaftDatei")]
    public partial class EigenschaftDatei
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EigenschaftDatei));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            return !string.IsNullOrEmpty(Value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EigenschaftDatei object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EigenschaftDatei object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EigenschaftDatei object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EigenschaftDatei obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EigenschaftDatei);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EigenschaftDatei obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EigenschaftDatei Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EigenschaftDatei)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EigenschaftDatei Deserialize(System.IO.Stream s)
        {
            return ((EigenschaftDatei)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EigenschaftDatei object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EigenschaftDatei object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EigenschaftDatei object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EigenschaftDatei obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EigenschaftDatei);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EigenschaftDatei obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EigenschaftDatei LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DateiDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "datei")]
    [System.Xml.Serialization.XmlRootAttribute("datei")]
    public abstract partial class Datei
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("originalName")]
        public string OriginalName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("pruefalgorithmus")]
        public Pruefalgorithmus Pruefalgorithmus { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("pruefsumme")]
        public string Pruefsumme { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("eigenschaft", ElementName = "eigenschaft")]
        public List<EigenschaftDatei> Eigenschaft { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID", AttributeName = "id")]
        public string Id { get; set; }

        public Datei()
        {
            this.Eigenschaft = new List<EigenschaftDatei>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Datei));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Eigenschaft should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEigenschaft()
        {
            return Eigenschaft != null && Eigenschaft.Count > 0;
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether OriginalName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOriginalName()
        {
            return !string.IsNullOrEmpty(OriginalName);
        }

        /// <summary>
        /// Test whether Pruefsumme should be serialized
        /// </summary>
        public virtual bool ShouldSerializePruefsumme()
        {
            return !string.IsNullOrEmpty(Pruefsumme);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Datei object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Datei object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Datei object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Datei obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Datei);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Datei obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Datei Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Datei)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Datei Deserialize(System.IO.Stream s)
        {
            return ((Datei)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Datei object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Datei object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Datei object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Datei obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Datei);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Datei obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Datei LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "pruefalgorithmus")]
    [System.Xml.Serialization.XmlRootAttribute("pruefalgorithmus")]
    public enum Pruefalgorithmus
    {

        /// <remarks/>
        MD5,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SHA-1")]
        SHA1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SHA-256")]
        SHA256,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SHA-512")]
        SHA512,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "dateiDIP")]
    [System.Xml.Serialization.XmlRootAttribute("dateiDIP")]
    public partial class DateiDIP : Datei
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DateiDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DateiDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DateiDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DateiDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DateiDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateiDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DateiDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static DateiDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DateiDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DateiDIP Deserialize(System.IO.Stream s)
        {
            return ((DateiDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DateiDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DateiDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DateiDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DateiDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateiDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DateiDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static DateiDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrdnerDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ordner")]
    [System.Xml.Serialization.XmlRootAttribute("ordner")]
    public abstract partial class Ordner
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("originalName")]
        public string OriginalName { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID", AttributeName = "id")]
        public string Id { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Ordner));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether OriginalName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOriginalName()
        {
            return !string.IsNullOrEmpty(OriginalName);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Ordner object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Ordner object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Ordner object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Ordner obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ordner);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Ordner obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Ordner Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Ordner)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Ordner Deserialize(System.IO.Stream s)
        {
            return ((Ordner)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Ordner object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Ordner object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Ordner object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Ordner obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Ordner);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Ordner obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Ordner LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "ordnerDIP")]
    [System.Xml.Serialization.XmlRootAttribute("ordnerDIP")]
    public partial class OrdnerDIP : Ordner
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ordner", ElementName = "ordner")]
        public List<OrdnerDIP> Ordner { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("datei", ElementName = "datei")]
        public List<DateiDIP> Datei { get; set; }

        public OrdnerDIP()
        {
            this.Datei = new List<DateiDIP>();
            this.Ordner = new List<OrdnerDIP>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrdnerDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Ordner should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrdner1()
        {
            return Ordner != null && Ordner.Count > 0;
        }

        /// <summary>
        /// Test whether Datei should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDatei()
        {
            return Datei != null && Datei.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrdnerDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an OrdnerDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrdnerDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrdnerDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrdnerDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OrdnerDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static OrdnerDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OrdnerDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OrdnerDIP Deserialize(System.IO.Stream s)
        {
            return ((OrdnerDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OrdnerDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OrdnerDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrdnerDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OrdnerDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrdnerDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OrdnerDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static OrdnerDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InhaltsverzeichnisDIP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "inhaltsverzeichnis")]
    [System.Xml.Serialization.XmlRootAttribute("inhaltsverzeichnis")]
    public abstract partial class Inhaltsverzeichnis
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Inhaltsverzeichnis));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Inhaltsverzeichnis object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Inhaltsverzeichnis object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Inhaltsverzeichnis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Inhaltsverzeichnis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Inhaltsverzeichnis);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Inhaltsverzeichnis obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Inhaltsverzeichnis Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Inhaltsverzeichnis)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Inhaltsverzeichnis Deserialize(System.IO.Stream s)
        {
            return ((Inhaltsverzeichnis)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Inhaltsverzeichnis object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Inhaltsverzeichnis object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Inhaltsverzeichnis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Inhaltsverzeichnis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Inhaltsverzeichnis);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Inhaltsverzeichnis obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Inhaltsverzeichnis LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "inhaltsverzeichnisDIP")]
    [System.Xml.Serialization.XmlRootAttribute("inhaltsverzeichnisDIP")]
    public partial class InhaltsverzeichnisDIP : Inhaltsverzeichnis
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ordner", ElementName = "ordner")]
        public List<OrdnerDIP> Ordner { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("datei", ElementName = "datei")]
        public List<DateiDIP> Datei { get; set; }

        public InhaltsverzeichnisDIP()
        {
            this.Datei = new List<DateiDIP>();
            this.Ordner = new List<OrdnerDIP>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(InhaltsverzeichnisDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Ordner should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrdner()
        {
            return Ordner != null && Ordner.Count > 0;
        }

        /// <summary>
        /// Test whether Datei should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDatei()
        {
            return Datei != null && Datei.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InhaltsverzeichnisDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an InhaltsverzeichnisDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output InhaltsverzeichnisDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out InhaltsverzeichnisDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(InhaltsverzeichnisDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out InhaltsverzeichnisDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static InhaltsverzeichnisDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((InhaltsverzeichnisDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static InhaltsverzeichnisDIP Deserialize(System.IO.Stream s)
        {
            return ((InhaltsverzeichnisDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current InhaltsverzeichnisDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an InhaltsverzeichnisDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InhaltsverzeichnisDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out InhaltsverzeichnisDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(InhaltsverzeichnisDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out InhaltsverzeichnisDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static InhaltsverzeichnisDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://bar.admin.ch/gebrauchskopie/v1", TypeName = "paketDIP")]
    [System.Xml.Serialization.XmlRootAttribute("paketDIP")]
    public partial class PaketDIP : Paket
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("inhaltsverzeichnis")]
        public InhaltsverzeichnisDIP Inhaltsverzeichnis { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ablieferung")]
        public AblieferungDIP Ablieferung { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("archivischerVorgang", ElementName = "archivischerVorgang")]
        public List<ArchivischerVorgang> ArchivischerVorgang { get; set; }

        public PaketDIP()
        {
            this.ArchivischerVorgang = new List<ArchivischerVorgang>();
            this.Ablieferung = new AblieferungDIP();
            this.Inhaltsverzeichnis = new InhaltsverzeichnisDIP();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PaketDIP));
                    serializer.UnknownNode += delegate (object sender, XmlNodeEventArgs e) { Debug.WriteLine("[Unknown Node] Ln {0} Col {1} Object: {2} LocalName {3}, NodeName: {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.LocalName, e.Name); };
                    serializer.UnknownElement += delegate (object sender, XmlElementEventArgs e) { Debug.WriteLine("[Unknown Element  ] Ln {0} Col {1} Object : {2} ExpectedElements {3}, Element : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedElements, e.Element.InnerXml); };
                    serializer.UnknownAttribute += delegate (object sender, XmlAttributeEventArgs e) { Debug.WriteLine("[Unknown Attribute] Ln {0} Col {1} Object : {2} LocalName {3}, Text : {4}", e.LineNumber, e.LinePosition, e.ObjectBeingDeserialized.GetType().FullName, e.ExpectedAttributes, e.Attr.Name); };
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ArchivischerVorgang should be serialized
        /// </summary>
        public virtual bool ShouldSerializeArchivischerVorgang()
        {
            return ArchivischerVorgang != null && ArchivischerVorgang.Count > 0;
        }

        /// <summary>
        /// Test whether Inhaltsverzeichnis should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInhaltsverzeichnis()
        {
            return (Inhaltsverzeichnis != null);
        }

        /// <summary>
        /// Test whether Ablieferung should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAblieferung()
        {
            return (Ablieferung != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PaketDIP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.IndentChars = "  ";
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PaketDIP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PaketDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PaketDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaketDIP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PaketDIP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static PaketDIP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PaketDIP)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PaketDIP Deserialize(System.IO.Stream s)
        {
            return ((PaketDIP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PaketDIP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PaketDIP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PaketDIP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PaketDIP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaketDIP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PaketDIP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static PaketDIP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
